{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ibrahim\\\\Desktop\\\\mini_react_project\\\\mini_react_project\\\\mini_react_project\\\\src\\\\Components\\\\Cards.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport '../App.css';\nimport animals from '../data/cards';\n// import bg from '../images/bg.png'\n\n// Math.random to return float number between 0 and 1 // example 0.73\n// Math.floor to return int number instead of Float // example 2.97 => 2\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomInt = num => Math.floor(Math.random() * num);\nconst sortRandom = (a, b) => 0.5 - Math.random();\nlet randomIndex = 0;\nlet randomArr = [];\nwhile (randomIndex < 8) {\n  let randomNumber = getRandomInt(animals.length);\n  if (randomArr.includes(randomNumber)) continue;else {\n    randomArr.push(randomNumber);\n    randomIndex++;\n  }\n}\nlet eightCards = animals.filter((card, index) => randomArr.includes(index));\nlet cards = [...eightCards, ...eightCards].map((card, index) => Object.assign({\n  index: index\n}, card));\nconst Cards = () => {\n  _s();\n  const [selected, setSelected] = useState(cards);\n  const [previousRef, setPreviousRef] = useState(\"\");\n  const [previousIndex, setPreviousIndex] = useState(-1);\n  const [className, setClassName] = useState('hide');\n  const [score, setScore] = useState(0);\n  const handleCompare = currentCard => {\n    // if (currentCard.status === 'show') return true\n    currentCard.status = '';\n    // setTimeout('', 10000);\n    if (previousRef) {\n      if (currentCard.ref === previousRef) currentCard.status = selected[previousIndex].status = \"show\";else currentCard.status = selected[previousIndex].status = \"hide\";\n      currentCard.status = className = className;\n      setPreviousRef(0);\n    } else {\n      setPreviousRef(currentCard.ref);\n      setPreviousIndex(currentCard.index);\n    }\n  };\n  return selected.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    onClick: () => handleCompare(card),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: card.status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: card.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, card.index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this));\n};\n_s(Cards, \"Ajxg1eM7n+91tCpxLNMyUW1C7QI=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useState","animals","jsxDEV","_jsxDEV","getRandomInt","num","Math","floor","random","sortRandom","a","b","randomIndex","randomArr","randomNumber","length","includes","push","eightCards","filter","card","index","cards","map","Object","assign","Cards","_s","selected","setSelected","previousRef","setPreviousRef","previousIndex","setPreviousIndex","className","setClassName","score","setScore","handleCompare","currentCard","status","ref","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","src","image","_c","$RefreshReg$"],"sources":["C:/Users/Ibrahim/Desktop/mini_react_project/mini_react_project/mini_react_project/src/Components/Cards.js"],"sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport '../App.css';\r\nimport animals from '../data/cards';\r\n// import bg from '../images/bg.png'\r\n\r\n// Math.random to return float number between 0 and 1 // example 0.73\r\n// Math.floor to return int number instead of Float // example 2.97 => 2\r\n\r\nconst getRandomInt = num => Math.floor(Math.random() * num);\r\nconst sortRandom = (a, b) => 0.5 - Math.random();  \r\n\r\nlet randomIndex = 0;\r\nlet randomArr = [];\r\n\r\nwhile (randomIndex < 8)\r\n    {\r\n        let randomNumber = getRandomInt(animals.length);\r\n        if (randomArr.includes(randomNumber)) continue\r\n        else {   randomArr.push(randomNumber);   randomIndex++;    }\r\n    }\r\n\r\nlet eightCards = animals.filter((card, index) => randomArr.includes(index));\r\nlet cards = [...eightCards, ...eightCards].map((card, index) => Object.assign({index:index}, card))\r\nconst Cards = () => {\r\n    \r\n    const [selected, setSelected] = useState(cards);\r\n    const [previousRef, setPreviousRef] =useState(\"\")\r\n    const [previousIndex, setPreviousIndex] =useState(-1)\r\n    const [className, setClassName] = useState('hide')\r\n    const [score, setScore] = useState(0)\r\n    \r\n    const handleCompare = (currentCard) => {\r\n        // if (currentCard.status === 'show') return true\r\n        currentCard.status = ''\r\n        // setTimeout('', 10000);\r\n        if (previousRef)\r\n            {\r\n                if (currentCard.ref === previousRef) currentCard.status = selected[previousIndex].status = \"show\"\r\n                else currentCard.status = selected[previousIndex].status = \"hide\"\r\n                currentCard.status = className\r\n                 = className\r\n                setPreviousRef(0)\r\n            }\r\n        else    \r\n            {\r\n                setPreviousRef(currentCard.ref)\r\n                setPreviousIndex(currentCard.index)\r\n            }\r\n    }\r\n\r\n    return (selected.map((card) =>   \r\n    <div key={card.index} className='card' onClick={() => handleCompare(card)}>\r\n      <div className={card.status}></div>\r\n      <img src={card.image}></img>\r\n    </div>\r\n    ))\r\n}\r\n\r\nexport default Cards;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}